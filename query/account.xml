<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="account">
    <!-- 구매 유니포인트 정보 등록 - 이력부 -->
    <insert id="insertBuyPointHistory">
        insert
        into tb_buy_point_history
        (user_no,
         type,
         money,
         tax,
         document_type,
         document_number,
         uni_point)
        values (#{user_no},
                #{type},
                #{money},
                #{tax},
                #{document_type},
                #{document_number},
                #{uni_point})
    </insert>
    <!-- 구매포인트 확인-->
    <select id="selectBuyPointHistory">
        select money,
        tax,
        uni_point,
        type,
        no
        from tb_buy_point_history
        where deleted_at is null
        and user_no = #{user_no}
        <if test="no != null and no!=''">
            and no = #{no}
        </if>
        <if test="type != null and type!=''">
            and type = #{type}
        </if>
    </select>
    <!-- 유니포인트 구매 이력 삭제-->
    <update id="deleteBuyPointHistory">
        update
            tb_buy_point_history
        set deleted_at = current_timestamp()
        where no = #{no}
    </update>

    <update id="confirmBuyPointHistory">
        update
            tb_buy_point_history
        set updated_at = current_timestamp(),
            type       = #{type}
        where no = #{no}
    </update>

    <!-- 사용자 금액 정보존재확인 -->
    <select id="countUserSum">
        select count(1) as count
        from tb_user_sum
        where user_no = #{value}
          and type = #{type}
    </select>

    <!-- 사용자의 현재 금액 정보 조회 -->
    <select id="selectUserSum">
        select
        uni_point,
        btc_point,
        money,
        type
        from tb_user_sum
        where 1=1
        <if test="user_no!=null and user_no!=''">
            and user_no = #{user_no}
        </if>
        <if test="type != null and type!=''">
            and type = #{type}
        </if>
    </select>

    <!-- 사용자의 전체금액 정보 신규입력 -->
    <insert id="insertUserSum">
        insert into tb_user_sum (user_no,
                                 uni_point,
                                 btc_point,
                                 money,
                                 type)
        values (#{user_no},
                #{uni_point},
                #{btc_point},
                #{money},
                #{type})
    </insert>
    <!-- 사용자의 전체금액 정보 수정입력 -->
    <update id="updateUserSum">
        update tb_user_sum
        set uni_point  = #{uni_point},
            btc_point  = #{btc_point},
            money      = #{money},
            type       = #{modify_type},
            updated_at = current_timestamp()
        where user_no = #{user_no}
          and type = #{origin_type}
    </update>

    <!-- 사용자의 전체 유니포인트 -->
    <select id="sumUserUniPoint">
        select type, sum(uni_point) as uni_point
        from tb_user_sum
        where user_no = #{user_no}
        group by type
    </select>

    <!-- 사용자 유니포인트 목록 -->
    <select id="selectBuyUniPointList">
        select type,
               uni_point,
               created_at,
               updated_at
        from tb_buy_point_history
        where user_no = 1
        order by no desc
        limit #{start_no} ,#{size}

    </select>
    <!-- 결제단계별 포인트별 합계 -->
    <select id="selectSumUniPoint">
        select type,
        sum(uni_point) as uni_point,
        sum(money) as money,
        sum(btc_point) as btc_point
        from tb_user_sum
        <if test="type!=null and type!=''">
            where type = #{type}
        </if>
        group by type
    </select>
    <!-- 사용자별 유효한 유니포인트 -->
    <select id="selectUserUniPointList">
        select user_no,
               sum(uni_point) uni_point
        from tb_buy_point_history
        where type = 'Y'
          /* updated_at 를 사용하는 이유는 포인트 구매요청후 구매확정이 되는 경우 updated_at 입력된다. 생성날짜만 있다면 그경우는 확정이 안된경우  */
          and DATE_FORMAT(updated_at, '%Y-%m-%d') &lt; #{day}
        group by user_no

    </select>

    <!-- 사용자별 코인 정보 입출력 -->
    <insert id="insertUserAccount">
        insert into tb_user_account_list (created_at,
                                          processed_time,
                                          user_no,
                                          type,
                                          coin_value,
                                          register_no,
                                          coin_type)
        values (current_timestamp(),
                #{processed_time},
                #{user_no},
                #{type}
                    #{coin_value},
                #{register_no}
                    #{coin_type});
    </insert>

</mapper>
